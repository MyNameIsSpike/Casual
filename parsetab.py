
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTGTLEGEORANDEQNEQleftPLUSMINUSleftTIMESDIVIDEMODrightNOTAND BOOLEAN BOOLEAN_LITERAL COLON COMMA DECL DEF DIVIDE ELSE EQ EQUALS FLOAT FLOAT_LITERAL GE GT ID IF INT INT_LITERAL LBRACE LBRACKET LE LPAREN LT MINUS MOD NEQ NOT OR PLUS RBRACE RBRACKET RETURN RPAREN SEMI STRING STRING_LITERAL TIMES VOID WHILEprogram : declaration program\n                | definition program\n                | emptydeclaration : DECL ID LPAREN function_args RPAREN COLON return_typedefinition : DEF ID LPAREN function_args RPAREN COLON return_type blockfunction_args : ID COLON var_type function_args\n                    | COMMA function_args\n                    | emptyreturn_type : INT\n                    | FLOAT\n                    | STRING\n                    | BOOLEAN\n                    | VOID\n                    | LBRACKET var_type RBRACKETblock : LBRACE recursive_statement RBRACErecursive_statement : statement recursive_statement\n                            | emptystatement : return_statement\n            | expression SEMI\n            | if_statement\n            | while_statement\n            | variable_declaration\n            | variable_assignmentreturn_statement : RETURN ret_value SEMIret_value : expression\n                | emptyif_statement : IF expression block else_statementelse_statement : ELSE block\n                | emptywhile_statement : WHILE expression blockvariable_declaration : ID COLON var_type EQUALS expression SEMIvariable_assignment : ID EQUALS expression SEMIvar_type : FLOAT\n                | INT\n                | STRING\n                | BOOLEAN\n                | LBRACKET var_type RBRACKETexpression : expression_binary_operation\n                    | expression_variable\n                    | expression_unary_operation\n                    | expression_literal\n                    | function_invocation\n                    | index_accessexpression_binary_operation : expression PLUS expression\n                                | expression MINUS expression\n                                | expression TIMES expression\n                                | expression DIVIDE expression\n                                | expression MOD expression\n                                | expression AND expression\n                                | expression OR expression\n                                | expression LT expression\n                                | expression GT expression\n                                | expression LE expression\n                                | expression GE expression\n                                | expression EQ expression\n                                | expression NEQ expressionexpression_variable : IDexpression_unary_operation : NOT expressionexpression_literal : FLOAT_LITERAL\n                | INT_LITERAL\n                | STRING_LITERAL\n                | BOOLEAN_LITERALfunction_invocation : ID LPAREN func_invocation_args RPARENfunc_invocation_args : expression func_invocation_args\n                            | COMMA func_invocation_args\n                            | emptyindex_access : ID index_access_auxindex_access_aux : LBRACKET expression RBRACKET\n                        | LPAREN func_invocation_args RPAREN LBRACKET expression RBRACKETempty : '
    
_lr_action_items = {'DECL':([0,2,3,32,33,34,35,36,37,42,44,69,],[5,5,5,-4,-9,-10,-11,-12,-13,-5,-14,-15,]),'DEF':([0,2,3,32,33,34,35,36,37,42,44,69,],[6,6,6,-4,-9,-10,-11,-12,-13,-5,-14,-15,]),'$end':([0,1,2,3,4,7,8,32,33,34,35,36,37,42,44,69,],[-70,0,-70,-70,-3,-1,-2,-4,-9,-10,-11,-12,-13,-5,-14,-15,]),'ID':([5,6,11,12,15,22,23,24,25,26,40,43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,120,122,123,124,125,128,129,131,132,134,],[9,10,13,13,13,13,-33,-34,-35,-36,-37,63,63,-18,-20,-21,-22,-23,88,-38,-39,-40,-41,-42,-43,88,88,88,-59,-60,-61,-62,-15,-19,88,88,88,88,88,88,88,88,88,88,88,88,88,-57,88,88,-67,88,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-24,-70,-30,88,88,-27,-29,88,-32,-63,-68,-28,88,-31,-69,]),'LPAREN':([9,10,63,88,],[11,12,93,93,]),'COMMA':([11,12,15,22,23,24,25,26,40,55,56,57,58,59,60,65,66,67,68,88,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,117,125,128,134,],[15,15,15,15,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-59,-60,-61,-62,-57,117,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,117,117,-63,-68,-69,]),'RPAREN':([11,12,14,15,16,17,20,22,23,24,25,26,30,40,55,56,57,58,59,60,65,66,67,68,88,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,115,116,117,118,125,126,127,128,134,],[-70,-70,19,-70,-8,21,-7,-70,-33,-34,-35,-36,-6,-37,-38,-39,-40,-41,-42,-43,-59,-60,-61,-62,-57,-70,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,125,-70,-70,-66,-63,-64,-65,-68,-69,]),'COLON':([13,19,21,63,],[18,28,29,91,]),'FLOAT':([18,27,28,29,38,91,],[23,23,34,34,23,23,]),'INT':([18,27,28,29,38,91,],[24,24,33,33,24,24,]),'STRING':([18,27,28,29,38,91,],[25,25,35,35,25,25,]),'BOOLEAN':([18,27,28,29,38,91,],[26,26,36,36,26,26,]),'LBRACKET':([18,27,28,29,38,63,88,91,125,],[27,27,38,38,27,95,95,27,131,]),'RBRACKET':([23,24,25,26,31,40,41,55,56,57,58,59,60,65,66,67,68,88,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,119,125,128,133,134,],[-33,-34,-35,-36,40,-37,44,-38,-39,-40,-41,-42,-43,-59,-60,-61,-62,-57,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,128,-63,-68,134,-69,]),'EQUALS':([23,24,25,26,40,63,113,],[-33,-34,-35,-36,-37,92,123,]),'VOID':([28,29,],[37,37,]),'LBRACE':([33,34,35,36,37,39,44,55,56,57,58,59,60,65,66,67,68,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,121,125,128,134,],[-9,-10,-11,-12,-13,43,-14,-38,-39,-40,-41,-42,-43,-59,-60,-61,-62,-57,43,43,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,43,-63,-68,-69,]),'RBRACE':([43,45,46,47,48,50,51,52,53,69,70,71,110,111,112,120,122,124,129,132,],[-70,69,-70,-17,-18,-20,-21,-22,-23,-15,-16,-19,-24,-70,-30,-27,-29,-32,-28,-31,]),'RETURN':([43,46,48,50,51,52,53,69,71,110,111,112,120,122,124,129,132,],[54,54,-18,-20,-21,-22,-23,-15,-19,-24,-70,-30,-27,-29,-32,-28,-31,]),'IF':([43,46,48,50,51,52,53,69,71,110,111,112,120,122,124,129,132,],[61,61,-18,-20,-21,-22,-23,-15,-19,-24,-70,-30,-27,-29,-32,-28,-31,]),'WHILE':([43,46,48,50,51,52,53,69,71,110,111,112,120,122,124,129,132,],[62,62,-18,-20,-21,-22,-23,-15,-19,-24,-70,-30,-27,-29,-32,-28,-31,]),'NOT':([43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,120,122,123,124,125,128,129,131,132,134,],[64,64,-18,-20,-21,-22,-23,64,-38,-39,-40,-41,-42,-43,64,64,64,-59,-60,-61,-62,-15,-19,64,64,64,64,64,64,64,64,64,64,64,64,64,-57,64,64,-67,64,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-24,-70,-30,64,64,-27,-29,64,-32,-63,-68,-28,64,-31,-69,]),'FLOAT_LITERAL':([43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,120,122,123,124,125,128,129,131,132,134,],[65,65,-18,-20,-21,-22,-23,65,-38,-39,-40,-41,-42,-43,65,65,65,-59,-60,-61,-62,-15,-19,65,65,65,65,65,65,65,65,65,65,65,65,65,-57,65,65,-67,65,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-24,-70,-30,65,65,-27,-29,65,-32,-63,-68,-28,65,-31,-69,]),'INT_LITERAL':([43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,120,122,123,124,125,128,129,131,132,134,],[66,66,-18,-20,-21,-22,-23,66,-38,-39,-40,-41,-42,-43,66,66,66,-59,-60,-61,-62,-15,-19,66,66,66,66,66,66,66,66,66,66,66,66,66,-57,66,66,-67,66,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-24,-70,-30,66,66,-27,-29,66,-32,-63,-68,-28,66,-31,-69,]),'STRING_LITERAL':([43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,120,122,123,124,125,128,129,131,132,134,],[67,67,-18,-20,-21,-22,-23,67,-38,-39,-40,-41,-42,-43,67,67,67,-59,-60,-61,-62,-15,-19,67,67,67,67,67,67,67,67,67,67,67,67,67,-57,67,67,-67,67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-24,-70,-30,67,67,-27,-29,67,-32,-63,-68,-28,67,-31,-69,]),'BOOLEAN_LITERAL':([43,46,48,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,117,120,122,123,124,125,128,129,131,132,134,],[68,68,-18,-20,-21,-22,-23,68,-38,-39,-40,-41,-42,-43,68,68,68,-59,-60,-61,-62,-15,-19,68,68,68,68,68,68,68,68,68,68,68,68,68,-57,68,68,-67,68,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-24,-70,-30,68,68,-27,-29,68,-32,-63,-68,-28,68,-31,-69,]),'SEMI':([49,54,55,56,57,58,59,60,63,65,66,67,68,85,86,87,88,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,125,128,130,134,],[71,-70,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,110,-25,-26,-57,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,124,-63,-68,132,-69,]),'PLUS':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[72,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,72,-57,72,72,-67,-58,-44,-45,-46,-47,-48,72,72,72,72,72,72,72,72,72,72,72,-63,-68,72,72,-69,]),'MINUS':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[73,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,73,-57,73,73,-67,-58,-44,-45,-46,-47,-48,73,73,73,73,73,73,73,73,73,73,73,-63,-68,73,73,-69,]),'TIMES':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[74,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,74,-57,74,74,-67,-58,74,74,-46,-47,-48,74,74,74,74,74,74,74,74,74,74,74,-63,-68,74,74,-69,]),'DIVIDE':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[75,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,75,-57,75,75,-67,-58,75,75,-46,-47,-48,75,75,75,75,75,75,75,75,75,75,75,-63,-68,75,75,-69,]),'MOD':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[76,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,76,-57,76,76,-67,-58,76,76,-46,-47,-48,76,76,76,76,76,76,76,76,76,76,76,-63,-68,76,76,-69,]),'AND':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[77,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,77,-57,77,77,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,77,77,77,-63,-68,77,77,-69,]),'OR':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[78,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,78,-57,78,78,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,78,78,78,-63,-68,78,78,-69,]),'LT':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[79,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,79,-57,79,79,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,79,79,79,-63,-68,79,79,-69,]),'GT':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[80,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,80,-57,80,80,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,80,80,80,-63,-68,80,80,-69,]),'LE':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[81,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,81,-57,81,81,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,81,81,81,-63,-68,81,81,-69,]),'GE':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[82,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,82,-57,82,82,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,82,82,82,-63,-68,82,82,-69,]),'EQ':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[83,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,83,-57,83,83,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,83,83,83,-63,-68,83,83,-69,]),'NEQ':([49,55,56,57,58,59,60,63,65,66,67,68,86,88,89,90,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,125,128,130,133,134,],[84,-38,-39,-40,-41,-42,-43,-57,-59,-60,-61,-62,84,-57,84,84,-67,-58,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,84,84,84,-63,-68,84,84,-69,]),'ELSE':([69,111,],[-15,121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,7,8,]),'declaration':([0,2,3,],[2,2,2,]),'definition':([0,2,3,],[3,3,3,]),'empty':([0,2,3,11,12,15,22,43,46,54,93,111,116,117,],[4,4,4,16,16,16,16,47,47,87,118,122,118,118,]),'function_args':([11,12,15,22,],[14,17,20,30,]),'var_type':([18,27,38,91,],[22,31,41,113,]),'return_type':([28,29,],[32,39,]),'block':([39,89,90,121,],[42,111,112,129,]),'recursive_statement':([43,46,],[45,70,]),'statement':([43,46,],[46,46,]),'return_statement':([43,46,],[48,48,]),'expression':([43,46,54,61,62,64,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,95,116,117,123,131,],[49,49,86,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,116,119,116,116,130,133,]),'if_statement':([43,46,],[50,50,]),'while_statement':([43,46,],[51,51,]),'variable_declaration':([43,46,],[52,52,]),'variable_assignment':([43,46,],[53,53,]),'expression_binary_operation':([43,46,54,61,62,64,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,95,116,117,123,131,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'expression_variable':([43,46,54,61,62,64,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,95,116,117,123,131,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'expression_unary_operation':([43,46,54,61,62,64,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,95,116,117,123,131,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'expression_literal':([43,46,54,61,62,64,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,95,116,117,123,131,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'function_invocation':([43,46,54,61,62,64,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,95,116,117,123,131,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'index_access':([43,46,54,61,62,64,72,73,74,75,76,77,78,79,80,81,82,83,84,92,93,95,116,117,123,131,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'ret_value':([54,],[85,]),'index_access_aux':([63,88,],[94,94,]),'func_invocation_args':([93,116,117,],[115,126,127,]),'else_statement':([111,],[120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration program','program',2,'p_program','parser.py',25),
  ('program -> definition program','program',2,'p_program','parser.py',26),
  ('program -> empty','program',1,'p_program','parser.py',27),
  ('declaration -> DECL ID LPAREN function_args RPAREN COLON return_type','declaration',7,'p_declaration','parser.py',35),
  ('definition -> DEF ID LPAREN function_args RPAREN COLON return_type block','definition',8,'p_definition','parser.py',40),
  ('function_args -> ID COLON var_type function_args','function_args',4,'p_function_args','parser.py',45),
  ('function_args -> COMMA function_args','function_args',2,'p_function_args','parser.py',46),
  ('function_args -> empty','function_args',1,'p_function_args','parser.py',47),
  ('return_type -> INT','return_type',1,'p_return_type','parser.py',61),
  ('return_type -> FLOAT','return_type',1,'p_return_type','parser.py',62),
  ('return_type -> STRING','return_type',1,'p_return_type','parser.py',63),
  ('return_type -> BOOLEAN','return_type',1,'p_return_type','parser.py',64),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',65),
  ('return_type -> LBRACKET var_type RBRACKET','return_type',3,'p_return_type','parser.py',66),
  ('block -> LBRACE recursive_statement RBRACE','block',3,'p_block','parser.py',74),
  ('recursive_statement -> statement recursive_statement','recursive_statement',2,'p_recursive_statement','parser.py',79),
  ('recursive_statement -> empty','recursive_statement',1,'p_recursive_statement','parser.py',80),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',88),
  ('statement -> expression SEMI','statement',2,'p_statement','parser.py',89),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',90),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',91),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',92),
  ('statement -> variable_assignment','statement',1,'p_statement','parser.py',93),
  ('return_statement -> RETURN ret_value SEMI','return_statement',3,'p_return_statement','parser.py',98),
  ('ret_value -> expression','ret_value',1,'p_ret_value','parser.py',103),
  ('ret_value -> empty','ret_value',1,'p_ret_value','parser.py',104),
  ('if_statement -> IF expression block else_statement','if_statement',4,'p_if_statement','parser.py',110),
  ('else_statement -> ELSE block','else_statement',2,'p_else_statement','parser.py',115),
  ('else_statement -> empty','else_statement',1,'p_else_statement','parser.py',116),
  ('while_statement -> WHILE expression block','while_statement',3,'p_while_stmt','parser.py',124),
  ('variable_declaration -> ID COLON var_type EQUALS expression SEMI','variable_declaration',6,'p_variable_declaration','parser.py',129),
  ('variable_assignment -> ID EQUALS expression SEMI','variable_assignment',4,'p_variable_assignment','parser.py',134),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',139),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',140),
  ('var_type -> STRING','var_type',1,'p_var_type','parser.py',141),
  ('var_type -> BOOLEAN','var_type',1,'p_var_type','parser.py',142),
  ('var_type -> LBRACKET var_type RBRACKET','var_type',3,'p_var_type','parser.py',143),
  ('expression -> expression_binary_operation','expression',1,'p_expression','parser.py',151),
  ('expression -> expression_variable','expression',1,'p_expression','parser.py',152),
  ('expression -> expression_unary_operation','expression',1,'p_expression','parser.py',153),
  ('expression -> expression_literal','expression',1,'p_expression','parser.py',154),
  ('expression -> function_invocation','expression',1,'p_expression','parser.py',155),
  ('expression -> index_access','expression',1,'p_expression','parser.py',156),
  ('expression_binary_operation -> expression PLUS expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',161),
  ('expression_binary_operation -> expression MINUS expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',162),
  ('expression_binary_operation -> expression TIMES expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',163),
  ('expression_binary_operation -> expression DIVIDE expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',164),
  ('expression_binary_operation -> expression MOD expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',165),
  ('expression_binary_operation -> expression AND expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',166),
  ('expression_binary_operation -> expression OR expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',167),
  ('expression_binary_operation -> expression LT expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',168),
  ('expression_binary_operation -> expression GT expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',169),
  ('expression_binary_operation -> expression LE expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',170),
  ('expression_binary_operation -> expression GE expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',171),
  ('expression_binary_operation -> expression EQ expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',172),
  ('expression_binary_operation -> expression NEQ expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',173),
  ('expression_variable -> ID','expression_variable',1,'p_expression_variable','parser.py',178),
  ('expression_unary_operation -> NOT expression','expression_unary_operation',2,'p_expression_unary_operation','parser.py',183),
  ('expression_literal -> FLOAT_LITERAL','expression_literal',1,'p_expression_literal','parser.py',188),
  ('expression_literal -> INT_LITERAL','expression_literal',1,'p_expression_literal','parser.py',189),
  ('expression_literal -> STRING_LITERAL','expression_literal',1,'p_expression_literal','parser.py',190),
  ('expression_literal -> BOOLEAN_LITERAL','expression_literal',1,'p_expression_literal','parser.py',191),
  ('function_invocation -> ID LPAREN func_invocation_args RPAREN','function_invocation',4,'p_function_invocation','parser.py',203),
  ('func_invocation_args -> expression func_invocation_args','func_invocation_args',2,'p_func_invocation_args','parser.py',208),
  ('func_invocation_args -> COMMA func_invocation_args','func_invocation_args',2,'p_func_invocation_args','parser.py',209),
  ('func_invocation_args -> empty','func_invocation_args',1,'p_func_invocation_args','parser.py',210),
  ('index_access -> ID index_access_aux','index_access',2,'p_index_access','parser.py',223),
  ('index_access_aux -> LBRACKET expression RBRACKET','index_access_aux',3,'p_index_access_aux','parser.py',228),
  ('index_access_aux -> LPAREN func_invocation_args RPAREN LBRACKET expression RBRACKET','index_access_aux',6,'p_index_access_aux','parser.py',229),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',237),
]
