
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLTGTLEGEORANDEQNEQleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSNOTAND BOOLEAN BOOLEAN_LITERAL COLON COMMA DECL DEF DIVIDE ELSE EQ EQUALS FLOAT FLOAT_LITERAL GE GT ID IF INT INT_LITERAL LBRACE LBRACKET LE LPAREN LT MINUS MOD NEQ NOT OR PLUS RBRACE RBRACKET RETURN RPAREN SEMI STRING STRING_LITERAL TIMES VOID WHILEprogram : declaration program\n                | definition program\n                | emptydeclaration : DECL ID LPAREN function_args RPAREN COLON return_typedefinition : DEF ID LPAREN function_args RPAREN COLON return_type blockfunction_args : ID COLON var_type function_args\n                    | COMMA function_args\n                    | emptyreturn_type : INT\n                    | FLOAT\n                    | STRING\n                    | BOOLEAN\n                    | VOIDblock : LBRACE recursive_statement RBRACErecursive_statement : statement recursive_statement\n                            | emptystatement : return_statement\n            | expression SEMI\n            | if_statement\n            | while_statement\n            | variable_declaration\n            | variable_assignmentreturn_statement : RETURN ret_value SEMIret_value : expression\n                | emptyif_statement : IF expression block else_statementelse_statement : ELSE block\n                | emptywhile_statement : WHILE expression blockvariable_declaration : ID COLON var_type EQUALS expression SEMIvariable_assignment : ID EQUALS expression SEMIvar_type : FLOAT\n                | INT\n                | STRING\n                | BOOLEANexpression : expression_binary_operation\n                    | expression_variable\n                    | expression_unary_operation\n                    | expression_literal\n                    | function_invocation\n                    | index_accessexpression_binary_operation : expression PLUS expression\n                                | expression MINUS expression\n                                | expression TIMES expression\n                                | expression DIVIDE expression\n                                | expression MOD expression\n                                | expression AND expression\n                                | expression OR expression\n                                | expression LT expression\n                                | expression GT expression\n                                | expression LE expression\n                                | expression GE expression\n                                | expression EQ expression\n                                | expression NEQ expressionexpression_variable : IDexpression_unary_operation : NOT expression\n                                | MINUS expression %prec UMINUSexpression_literal : FLOAT_LITERAL\n                | INT_LITERAL\n                | STRING_LITERAL\n                | BOOLEAN_LITERALfunction_invocation : ID LPAREN func_invocation_args RPARENfunc_invocation_args : ID func_invocation_args\n                            | COMMA func_invocation_args\n                            | emptyindex_access : ID index_access_auxindex_access_aux : LBRACKET expression RBRACKET\n                        | LPAREN func_invocation_args RPAREN LBRACKET expression RBRACKETempty : '
    
_lr_action_items = {'DECL':([0,2,3,30,31,32,33,34,35,37,64,],[5,5,5,-4,-9,-10,-11,-12,-13,-5,-14,]),'DEF':([0,2,3,30,31,32,33,34,35,37,64,],[6,6,6,-4,-9,-10,-11,-12,-13,-5,-14,]),'$end':([0,1,2,3,4,7,8,30,31,32,33,34,35,37,64,],[-69,0,-69,-69,-3,-1,-2,-4,-9,-10,-11,-12,-13,-5,-14,]),'ID':([5,6,11,12,15,22,23,24,25,26,38,40,42,44,45,46,47,48,55,56,58,59,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,88,90,106,107,108,111,113,116,118,119,120,125,127,128,],[9,10,13,13,13,13,-32,-33,-34,-35,57,57,-17,-19,-20,-21,-22,83,83,83,83,83,-14,-18,83,83,83,83,83,83,83,83,83,83,83,83,83,83,111,83,-23,-69,-29,111,111,-26,-28,83,-31,-27,83,-30,]),'LPAREN':([9,10,57,83,],[11,12,88,88,]),'COMMA':([11,12,15,22,23,24,25,26,88,111,113,],[15,15,15,15,-32,-33,-34,-35,113,113,113,]),'RPAREN':([11,12,14,15,16,17,20,22,23,24,25,26,29,88,111,112,113,114,121,123,],[-69,-69,19,-69,-8,21,-7,-69,-32,-33,-34,-35,-6,-69,-69,122,-69,-65,-63,-64,]),'COLON':([13,19,21,57,],[18,27,28,86,]),'FLOAT':([18,27,28,86,],[23,32,32,23,]),'INT':([18,27,28,86,],[24,31,31,24,]),'STRING':([18,27,28,86,],[25,33,33,25,]),'BOOLEAN':([18,27,28,86,],[26,34,34,26,]),'EQUALS':([23,24,25,26,57,109,],[-32,-33,-34,-35,87,119,]),'VOID':([27,28,],[35,35,]),'LBRACE':([31,32,33,34,35,36,49,50,51,52,53,54,60,61,62,63,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,117,122,124,130,],[-9,-10,-11,-12,-13,38,-36,-37,-38,-39,-40,-41,-58,-59,-60,-61,-55,38,38,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,38,-62,-67,-68,]),'RBRACE':([38,39,40,41,42,44,45,46,47,64,65,66,106,107,108,116,118,120,125,128,],[-69,64,-69,-16,-17,-19,-20,-21,-22,-14,-15,-18,-23,-69,-29,-26,-28,-31,-27,-30,]),'RETURN':([38,40,42,44,45,46,47,64,66,106,107,108,116,118,120,125,128,],[48,48,-17,-19,-20,-21,-22,-14,-18,-23,-69,-29,-26,-28,-31,-27,-30,]),'IF':([38,40,42,44,45,46,47,64,66,106,107,108,116,118,120,125,128,],[55,55,-17,-19,-20,-21,-22,-14,-18,-23,-69,-29,-26,-28,-31,-27,-30,]),'WHILE':([38,40,42,44,45,46,47,64,66,106,107,108,116,118,120,125,128,],[56,56,-17,-19,-20,-21,-22,-14,-18,-23,-69,-29,-26,-28,-31,-27,-30,]),'NOT':([38,40,42,44,45,46,47,48,55,56,58,59,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,106,107,108,116,118,119,120,125,127,128,],[59,59,-17,-19,-20,-21,-22,59,59,59,59,59,-14,-18,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-23,-69,-29,-26,-28,59,-31,-27,59,-30,]),'MINUS':([38,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,84,85,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,115,116,118,119,120,122,124,125,126,127,128,129,130,],[58,58,-17,68,-19,-20,-21,-22,58,-36,-37,-38,-39,-40,-41,58,58,-55,58,58,-58,-59,-60,-61,-14,-18,58,58,58,58,58,58,58,58,58,58,58,58,58,68,-55,68,68,58,-66,58,-57,-56,-42,-43,-44,-45,-46,68,68,68,68,68,68,68,68,-23,-69,-29,68,68,-26,-28,58,-31,-62,-67,-27,68,58,-30,68,-68,]),'FLOAT_LITERAL':([38,40,42,44,45,46,47,48,55,56,58,59,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,106,107,108,116,118,119,120,125,127,128,],[60,60,-17,-19,-20,-21,-22,60,60,60,60,60,-14,-18,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-23,-69,-29,-26,-28,60,-31,-27,60,-30,]),'INT_LITERAL':([38,40,42,44,45,46,47,48,55,56,58,59,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,106,107,108,116,118,119,120,125,127,128,],[61,61,-17,-19,-20,-21,-22,61,61,61,61,61,-14,-18,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-23,-69,-29,-26,-28,61,-31,-27,61,-30,]),'STRING_LITERAL':([38,40,42,44,45,46,47,48,55,56,58,59,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,106,107,108,116,118,119,120,125,127,128,],[62,62,-17,-19,-20,-21,-22,62,62,62,62,62,-14,-18,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-23,-69,-29,-26,-28,62,-31,-27,62,-30,]),'BOOLEAN_LITERAL':([38,40,42,44,45,46,47,48,55,56,58,59,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,106,107,108,116,118,119,120,125,127,128,],[63,63,-17,-19,-20,-21,-22,63,63,63,63,63,-14,-18,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-23,-69,-29,-26,-28,63,-31,-27,63,-30,]),'SEMI':([43,48,49,50,51,52,53,54,57,60,61,62,63,80,81,82,83,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,122,124,126,130,],[66,-69,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,106,-24,-25,-55,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,120,-62,-67,128,-68,]),'PLUS':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[67,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,67,-55,67,67,-66,-57,-56,-42,-43,-44,-45,-46,67,67,67,67,67,67,67,67,67,67,-62,-67,67,67,-68,]),'TIMES':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[69,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,69,-55,69,69,-66,-57,-56,69,69,-44,-45,-46,69,69,69,69,69,69,69,69,69,69,-62,-67,69,69,-68,]),'DIVIDE':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[70,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,70,-55,70,70,-66,-57,-56,70,70,-44,-45,-46,70,70,70,70,70,70,70,70,70,70,-62,-67,70,70,-68,]),'MOD':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[71,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,71,-55,71,71,-66,-57,-56,71,71,-44,-45,-46,71,71,71,71,71,71,71,71,71,71,-62,-67,71,71,-68,]),'AND':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[72,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,72,-55,72,72,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,72,72,-62,-67,72,72,-68,]),'OR':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[73,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,73,-55,73,73,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,73,73,-62,-67,73,73,-68,]),'LT':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[74,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,74,-55,74,74,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,74,74,-62,-67,74,74,-68,]),'GT':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[75,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,75,-55,75,75,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,75,75,-62,-67,75,75,-68,]),'LE':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[76,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,76,-55,76,76,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,76,76,-62,-67,76,76,-68,]),'GE':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[77,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,77,-55,77,77,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,77,77,-62,-67,77,77,-68,]),'EQ':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[78,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,78,-55,78,78,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,78,78,-62,-67,78,78,-68,]),'NEQ':([43,49,50,51,52,53,54,57,60,61,62,63,81,83,84,85,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,122,124,126,129,130,],[79,-36,-37,-38,-39,-40,-41,-55,-58,-59,-60,-61,79,-55,79,79,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,79,79,-62,-67,79,79,-68,]),'RBRACKET':([49,50,51,52,53,54,60,61,62,63,83,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,115,122,124,129,130,],[-36,-37,-38,-39,-40,-41,-58,-59,-60,-61,-55,-66,-57,-56,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,124,-62,-67,130,-68,]),'LBRACKET':([57,83,122,],[90,90,127,]),'ELSE':([64,107,],[-14,117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,7,8,]),'declaration':([0,2,3,],[2,2,2,]),'definition':([0,2,3,],[3,3,3,]),'empty':([0,2,3,11,12,15,22,38,40,48,88,107,111,113,],[4,4,4,16,16,16,16,41,41,82,114,118,114,114,]),'function_args':([11,12,15,22,],[14,17,20,29,]),'var_type':([18,86,],[22,109,]),'return_type':([27,28,],[30,36,]),'block':([36,84,85,117,],[37,107,108,125,]),'recursive_statement':([38,40,],[39,65,]),'statement':([38,40,],[40,40,]),'return_statement':([38,40,],[42,42,]),'expression':([38,40,48,55,56,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,119,127,],[43,43,81,84,85,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,115,126,129,]),'if_statement':([38,40,],[44,44,]),'while_statement':([38,40,],[45,45,]),'variable_declaration':([38,40,],[46,46,]),'variable_assignment':([38,40,],[47,47,]),'expression_binary_operation':([38,40,48,55,56,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,119,127,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'expression_variable':([38,40,48,55,56,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,119,127,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'expression_unary_operation':([38,40,48,55,56,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,119,127,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'expression_literal':([38,40,48,55,56,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,119,127,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'function_invocation':([38,40,48,55,56,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,119,127,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'index_access':([38,40,48,55,56,58,59,67,68,69,70,71,72,73,74,75,76,77,78,79,87,90,119,127,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ret_value':([48,],[80,]),'index_access_aux':([57,83,],[89,89,]),'func_invocation_args':([88,111,113,],[112,121,123,]),'else_statement':([107,],[116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration program','program',2,'p_program','parser.py',26),
  ('program -> definition program','program',2,'p_program','parser.py',27),
  ('program -> empty','program',1,'p_program','parser.py',28),
  ('declaration -> DECL ID LPAREN function_args RPAREN COLON return_type','declaration',7,'p_declaration','parser.py',36),
  ('definition -> DEF ID LPAREN function_args RPAREN COLON return_type block','definition',8,'p_definition','parser.py',41),
  ('function_args -> ID COLON var_type function_args','function_args',4,'p_function_args','parser.py',46),
  ('function_args -> COMMA function_args','function_args',2,'p_function_args','parser.py',47),
  ('function_args -> empty','function_args',1,'p_function_args','parser.py',48),
  ('return_type -> INT','return_type',1,'p_return_type','parser.py',60),
  ('return_type -> FLOAT','return_type',1,'p_return_type','parser.py',61),
  ('return_type -> STRING','return_type',1,'p_return_type','parser.py',62),
  ('return_type -> BOOLEAN','return_type',1,'p_return_type','parser.py',63),
  ('return_type -> VOID','return_type',1,'p_return_type','parser.py',64),
  ('block -> LBRACE recursive_statement RBRACE','block',3,'p_block','parser.py',69),
  ('recursive_statement -> statement recursive_statement','recursive_statement',2,'p_recursive_statement','parser.py',74),
  ('recursive_statement -> empty','recursive_statement',1,'p_recursive_statement','parser.py',75),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',81),
  ('statement -> expression SEMI','statement',2,'p_statement','parser.py',82),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',83),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',84),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',85),
  ('statement -> variable_assignment','statement',1,'p_statement','parser.py',86),
  ('return_statement -> RETURN ret_value SEMI','return_statement',3,'p_return_statement','parser.py',91),
  ('ret_value -> expression','ret_value',1,'p_ret_value','parser.py',96),
  ('ret_value -> empty','ret_value',1,'p_ret_value','parser.py',97),
  ('if_statement -> IF expression block else_statement','if_statement',4,'p_if_statement','parser.py',103),
  ('else_statement -> ELSE block','else_statement',2,'p_else_statement','parser.py',108),
  ('else_statement -> empty','else_statement',1,'p_else_statement','parser.py',109),
  ('while_statement -> WHILE expression block','while_statement',3,'p_while_stmt','parser.py',115),
  ('variable_declaration -> ID COLON var_type EQUALS expression SEMI','variable_declaration',6,'p_variable_declaration','parser.py',120),
  ('variable_assignment -> ID EQUALS expression SEMI','variable_assignment',4,'p_variable_assignment','parser.py',125),
  ('var_type -> FLOAT','var_type',1,'p_var_type','parser.py',130),
  ('var_type -> INT','var_type',1,'p_var_type','parser.py',131),
  ('var_type -> STRING','var_type',1,'p_var_type','parser.py',132),
  ('var_type -> BOOLEAN','var_type',1,'p_var_type','parser.py',133),
  ('expression -> expression_binary_operation','expression',1,'p_expression','parser.py',138),
  ('expression -> expression_variable','expression',1,'p_expression','parser.py',139),
  ('expression -> expression_unary_operation','expression',1,'p_expression','parser.py',140),
  ('expression -> expression_literal','expression',1,'p_expression','parser.py',141),
  ('expression -> function_invocation','expression',1,'p_expression','parser.py',142),
  ('expression -> index_access','expression',1,'p_expression','parser.py',143),
  ('expression_binary_operation -> expression PLUS expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',148),
  ('expression_binary_operation -> expression MINUS expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',149),
  ('expression_binary_operation -> expression TIMES expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',150),
  ('expression_binary_operation -> expression DIVIDE expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',151),
  ('expression_binary_operation -> expression MOD expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',152),
  ('expression_binary_operation -> expression AND expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',153),
  ('expression_binary_operation -> expression OR expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',154),
  ('expression_binary_operation -> expression LT expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',155),
  ('expression_binary_operation -> expression GT expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',156),
  ('expression_binary_operation -> expression LE expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',157),
  ('expression_binary_operation -> expression GE expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',158),
  ('expression_binary_operation -> expression EQ expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',159),
  ('expression_binary_operation -> expression NEQ expression','expression_binary_operation',3,'p_expression_binary_operation','parser.py',160),
  ('expression_variable -> ID','expression_variable',1,'p_expression_variable','parser.py',165),
  ('expression_unary_operation -> NOT expression','expression_unary_operation',2,'p_expression_unary_operation','parser.py',170),
  ('expression_unary_operation -> MINUS expression','expression_unary_operation',2,'p_expression_unary_operation','parser.py',171),
  ('expression_literal -> FLOAT_LITERAL','expression_literal',1,'p_expression_literal','parser.py',176),
  ('expression_literal -> INT_LITERAL','expression_literal',1,'p_expression_literal','parser.py',177),
  ('expression_literal -> STRING_LITERAL','expression_literal',1,'p_expression_literal','parser.py',178),
  ('expression_literal -> BOOLEAN_LITERAL','expression_literal',1,'p_expression_literal','parser.py',179),
  ('function_invocation -> ID LPAREN func_invocation_args RPAREN','function_invocation',4,'p_function_invocation','parser.py',191),
  ('func_invocation_args -> ID func_invocation_args','func_invocation_args',2,'p_func_invocation_args','parser.py',196),
  ('func_invocation_args -> COMMA func_invocation_args','func_invocation_args',2,'p_func_invocation_args','parser.py',197),
  ('func_invocation_args -> empty','func_invocation_args',1,'p_func_invocation_args','parser.py',198),
  ('index_access -> ID index_access_aux','index_access',2,'p_index_access','parser.py',209),
  ('index_access_aux -> LBRACKET expression RBRACKET','index_access_aux',3,'p_index_access_aux','parser.py',214),
  ('index_access_aux -> LPAREN func_invocation_args RPAREN LBRACKET expression RBRACKET','index_access_aux',6,'p_index_access_aux','parser.py',215),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',223),
]
